// Code generated by github.com/skipor/gmg - type-safe, fast and handy alternative GoMock generator. DO NOT EDIT.
// Source: library/api/storage.LibraryStorage

package mocks_storage

import (
	context "context"
	sql "database/sql"
	model "library/api/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NewMockLibraryStorage creates a new GoMock for library/api/storage.LibraryStorage.
func NewMockLibraryStorage(ctrl *gomock.Controller) *MockLibraryStorage {
	return &MockLibraryStorage{ctrl: ctrl}
}

// MockLibraryStorage is a GoMock of library/api/storage.LibraryStorage.
type MockLibraryStorage struct{ ctrl *gomock.Controller }

// EXPECT returns GoMock recorder.
func (m_ *MockLibraryStorage) EXPECT() *MockLibraryStorageMockRecorder {
	return (*MockLibraryStorageMockRecorder)(m_)
}

// GetByAuthor implements mocked interface.
func (m_ *MockLibraryStorage) GetByAuthor(ctx context.Context, title string, db *sql.DB) ([]*model.Book, error) {
	m_.ctrl.T.Helper()
	res_ := m_.ctrl.Call(m_, "GetByAuthor", ctx, title, db)
	res0, _ := res_[0].([]*model.Book)
	res1, _ := res_[1].(error)
	return res0, res1
}

// GetByTitle implements mocked interface.
func (m_ *MockLibraryStorage) GetByTitle(ctx context.Context, title string, db *sql.DB) ([]*model.Book, error) {
	m_.ctrl.T.Helper()
	res_ := m_.ctrl.Call(m_, "GetByTitle", ctx, title, db)
	res0, _ := res_[0].([]*model.Book)
	res1, _ := res_[1].(error)
	return res0, res1
}

// MockLibraryStorageMockRecorder is the mock recorder for MockLibraryStorage.
type MockLibraryStorageMockRecorder MockLibraryStorage

// GetByAuthor(ctx context.Context, title string, db *sql.DB) ([]*model.Book, error)
func (r_ *MockLibraryStorageMockRecorder) GetByAuthor(ctx interface{}, title interface{}, db interface{}) MockLibraryStorageGetByAuthorCall {
	r_.ctrl.T.Helper()
	call := r_.ctrl.RecordCallWithMethodType(r_.mock(), "GetByAuthor", reflect.TypeOf((*MockLibraryStorage)(nil).GetByAuthor), ctx, title, db)
	return MockLibraryStorageGetByAuthorCall{call}
}

// MockLibraryStorageGetByAuthorCall is type safe wrapper of *gomock.Call.
type MockLibraryStorageGetByAuthorCall struct{ *gomock.Call }

// DoAndReturn is type safe wrapper of *gomock.Call DoAndReturn.
func (c_ MockLibraryStorageGetByAuthorCall) DoAndReturn(f func(ctx context.Context, title string, db *sql.DB) ([]*model.Book, error)) MockLibraryStorageGetByAuthorCall {
	c_.Call.DoAndReturn(f)
	return c_
}

// Do is type safe wrapper of *gomock.Call Do.
func (c_ MockLibraryStorageGetByAuthorCall) Do(f func(ctx context.Context, title string, db *sql.DB)) MockLibraryStorageGetByAuthorCall {
	c_.Call.Do(f)
	return c_
}

// Return is type safe wrapper of *gomock.Call Return.
func (c_ MockLibraryStorageGetByAuthorCall) Return(res0 []*model.Book, res1 error) MockLibraryStorageGetByAuthorCall {
	c_.Call.Return(res0, res1)
	return c_
}

// GetByTitle(ctx context.Context, title string, db *sql.DB) ([]*model.Book, error)
func (r_ *MockLibraryStorageMockRecorder) GetByTitle(ctx interface{}, title interface{}, db interface{}) MockLibraryStorageGetByTitleCall {
	r_.ctrl.T.Helper()
	call := r_.ctrl.RecordCallWithMethodType(r_.mock(), "GetByTitle", reflect.TypeOf((*MockLibraryStorage)(nil).GetByTitle), ctx, title, db)
	return MockLibraryStorageGetByTitleCall{call}
}

// MockLibraryStorageGetByTitleCall is type safe wrapper of *gomock.Call.
type MockLibraryStorageGetByTitleCall struct{ *gomock.Call }

// DoAndReturn is type safe wrapper of *gomock.Call DoAndReturn.
func (c_ MockLibraryStorageGetByTitleCall) DoAndReturn(f func(ctx context.Context, title string, db *sql.DB) ([]*model.Book, error)) MockLibraryStorageGetByTitleCall {
	c_.Call.DoAndReturn(f)
	return c_
}

// Do is type safe wrapper of *gomock.Call Do.
func (c_ MockLibraryStorageGetByTitleCall) Do(f func(ctx context.Context, title string, db *sql.DB)) MockLibraryStorageGetByTitleCall {
	c_.Call.Do(f)
	return c_
}

// Return is type safe wrapper of *gomock.Call Return.
func (c_ MockLibraryStorageGetByTitleCall) Return(res0 []*model.Book, res1 error) MockLibraryStorageGetByTitleCall {
	c_.Call.Return(res0, res1)
	return c_
}

func (r_ *MockLibraryStorageMockRecorder) mock() *MockLibraryStorage {
	return (*MockLibraryStorage)(r_)
}
