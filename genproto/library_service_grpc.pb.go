// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: library/v1/library_service.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	"library/genproto/model"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LibraryService_GetBooksByTitle_FullMethodName  = "/library.book.service.v1.LibraryService/GetBooksByTitle"
	LibraryService_GetBooksByAuthor_FullMethodName = "/library.book.service.v1.LibraryService/GetBooksByAuthor"
)

// LibraryServiceClient is the client API for LibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibraryServiceClient interface {
	GetBooksByTitle(ctx context.Context, in *model.GetByTitleRequest, opts ...grpc.CallOption) (*model.GetBooksResponse, error)
	GetBooksByAuthor(ctx context.Context, in *model.GetByAuthorRequest, opts ...grpc.CallOption) (*model.GetBooksResponse, error)
}

type libraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryServiceClient(cc grpc.ClientConnInterface) LibraryServiceClient {
	return &libraryServiceClient{cc}
}

func (c *libraryServiceClient) GetBooksByTitle(ctx context.Context, in *model.GetByTitleRequest, opts ...grpc.CallOption) (*model.GetBooksResponse, error) {
	out := new(model.GetBooksResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetBooksByTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetBooksByAuthor(ctx context.Context, in *model.GetByAuthorRequest, opts ...grpc.CallOption) (*model.GetBooksResponse, error) {
	out := new(model.GetBooksResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetBooksByAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibraryServiceServer is the server API for LibraryService service.
// All implementations must embed UnimplementedLibraryServiceServer
// for forward compatibility
type LibraryServiceServer interface {
	GetBooksByTitle(context.Context, *model.GetByTitleRequest) (*model.GetBooksResponse, error)
	GetBooksByAuthor(context.Context, *model.GetByAuthorRequest) (*model.GetBooksResponse, error)
	mustEmbedUnimplementedLibraryServiceServer()
}

// UnimplementedLibraryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibraryServiceServer struct {
}

func (UnimplementedLibraryServiceServer) GetBooksByTitle(context.Context, *model.GetByTitleRequest) (*model.GetBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByTitle not implemented")
}
func (UnimplementedLibraryServiceServer) GetBooksByAuthor(context.Context, *model.GetByAuthorRequest) (*model.GetBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedLibraryServiceServer) mustEmbedUnimplementedLibraryServiceServer() {}

// UnsafeLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServiceServer will
// result in compilation errors.
type UnsafeLibraryServiceServer interface {
	mustEmbedUnimplementedLibraryServiceServer()
}

func RegisterLibraryServiceServer(s grpc.ServiceRegistrar, srv LibraryServiceServer) {
	s.RegisterService(&LibraryService_ServiceDesc, srv)
}

func _LibraryService_GetBooksByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetBooksByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetBooksByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetBooksByTitle(ctx, req.(*model.GetByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetByAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetBooksByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetBooksByAuthor(ctx, req.(*model.GetByAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibraryService_ServiceDesc is the grpc.ServiceDesc for LibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.book.service.v1.LibraryService",
	HandlerType: (*LibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooksByTitle",
			Handler:    _LibraryService_GetBooksByTitle_Handler,
		},
		{
			MethodName: "GetBooksByAuthor",
			Handler:    _LibraryService_GetBooksByAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library/v1/library_service.proto",
}
